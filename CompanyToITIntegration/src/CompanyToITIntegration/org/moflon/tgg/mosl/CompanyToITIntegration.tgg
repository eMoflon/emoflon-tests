#import "platform:/plugin/CompanyLanguage/model/CompanyLanguage.ecore"
#import "platform:/plugin/ITLanguage/model/ITLanguage.ecore"

#schema CompanyToITIntegration

#source {
	CompanyLanguage
}

#target {
	ITLanguage
}

#correspondence {
	AdminToRouter {
		#src->CompanyLanguage.Admin
		#trg->ITLanguage.Router
	}
	EmployeeToPC {
		#src->CompanyLanguage.Employee
		#trg->ITLanguage.PC
	}
	EmployeeToLaptop {
		#src->CompanyLanguage.Employee
		#trg->ITLanguage.Laptop
	}
	CompanyToIT {
		#src->CompanyLanguage.Company
		#trg->ITLanguage.IT
	}
}

#attributeConditions {
	eq(1: , 0: ) {
		#sync: FB, BF, BB
		#gen: BB, BF, FB, FF
	}
}


#using CompanyToITIntegration.*

#rule AdminToRouterRule #with CompanyToITIntegration

#source {
	company:CompanyLanguage.Company {
		- admin->noAdmin
		- ceo->ceo
		++ - admin->admin
	}
	!noAdmin:CompanyLanguage.Admin
	ceo:CompanyLanguage.CEO
	++admin:CompanyLanguage.Admin {
		++ - ceo->ceo
	}
}

#target {
	++router:ITLanguage.Router {
		++ - network->network
	}
	!noNetwork:ITLanguage.Network
	it:ITLanguage.IT {
		++ - network->network
		- network->noNetwork
		++ - router->router
	}
	++network:ITLanguage.Network
}

#correspondence {
	++ a2r :AdminToRouter {
		#src->admin
		#trg->router
	}
	c2i :CompanyToIT {
		#src->company
		#trg->it
	}
}

#attributeConditions {
	eq (admin.name, router.name)
	eq (it.name, network.name)
}


#using CompanyToITIntegration.*

#rule CompanyToITRule #with CompanyToITIntegration

#source {
	++ceo:CompanyLanguage.CEO
	++company:CompanyLanguage.Company {
		++ - ceo->ceo
	}
}

#target {
	++it:ITLanguage.IT
}

#correspondence {
	++ c2i :CompanyToIT {
		#src->company
		#trg->it
	}
}

#attributeConditions {
	eq (company.name, it.name)
}


#using CompanyToITIntegration.*

#rule EmployeeToLaptopRule #with CompanyToITIntegration

#source {
	ceo:CompanyLanguage.CEO {
		++ - employee->employee
	}
	company:CompanyLanguage.Company {
		- ceo->ceo
		- admin->admin
		++ - employee->employee
	}
	admin:CompanyLanguage.Admin {
		- ceo->ceo
	}
	++employee:CompanyLanguage.Employee
}

#target {
	++computer:ITLanguage.Laptop
	it:ITLanguage.IT {
		- network->network
		- router->router
	}
	network:ITLanguage.Network {
		++ - laptop->computer
	}
	router:ITLanguage.Router {
		- network->network
	}
}

#correspondence {
	c2i :CompanyToIT {
		#src->company
		#trg->it
	}
	a2r :AdminToRouter {
		#src->admin
		#trg->router
	}
	++ e2p :EmployeeToLaptop {
		#src->employee
		#trg->computer
	}
}

#attributeConditions {
	eq (employee.name, computer.name)
}


#using CompanyToITIntegration.*

#rule EmployeeToPCRule #with CompanyToITIntegration

#source {
	admin:CompanyLanguage.Admin {
		- ceo->ceo
	}
	company:CompanyLanguage.Company {
		- admin->admin
		++ - employee->employee
		- ceo->ceo
	}
	ceo:CompanyLanguage.CEO {
		++ - employee->employee
	}
	++employee:CompanyLanguage.Employee
}

#target {
	network:ITLanguage.Network {
		++ - pc->computer
	}
	it:ITLanguage.IT {
		- router->router
		- network->network
	}
	++computer:ITLanguage.PC
	router:ITLanguage.Router {
		- network->network
	}
}

#correspondence {
	++ e2p :EmployeeToPC {
		#src->employee
		#trg->computer
	}
	a2r :AdminToRouter {
		#src->admin
		#trg->router
	}
	c2i :CompanyToIT {
		#src->company
		#trg->it
	}
}

#attributeConditions {
	eq (employee.name, computer.name)
}


