#import "http://www.eclipse.org/emf/2002/Ecore"
#import "platform:/plugin/MocaTree/model/MocaTree.ecore"
#import "platform:/plugin/SDMLanguage/model/SDMLanguage.ecore#//activities"

#schema SimpleEcoreToHTML

#source {
	ecore
	SDMLanguage.activities }

#target {
	MocaTree
}

#correspondence {
	EClassToSuperClassesTable {
		#src->ecore.EClass
		#trg->MocaTree.Node
	}
	EPackageToFolder {
		#src->ecore.EPackage
		#trg->MocaTree.Folder
	}
	EClassToMethodTable {
		#src->ecore.EClass
		#trg->MocaTree.Node
	}
	EClassToFile {
		#src->ecore.EClass
		#trg->MocaTree.File
	}
	EOperationToNode {
		#src->ecore.EOperation
		#trg->MocaTree.Node
	}
}

#attributeConditions {
	eq(1: , 0: ) {
		#sync: FB, BF, BB
		#gen: FF, FB, BF, BB
	}
	addSuffix(2:EString, 1:EString, 0:EString) {
		#sync: FBB, BFB, BBB, BBF
		#gen: FFF, FBB, FBF, BFB, BFF, BBB, BBF
	}
	addPrefix(0:EString, 1:EString, 2:EString) {
		#sync: BBB, FBB, BFB, BBF
		#gen: BFF, FBB, BBF, BFB, BBB, FBF
	}
}


#using SimpleEcoreToHTML.*

#rule DocumentMethod #with SimpleEcoreToHTML

#source {
	++src__method:ecore.EOperation
}

#target {
	++ref:MocaTree.Text {
		++ - parentNode->td
	}
	++tr:MocaTree.Node {
		name := "tr"
	}
	++td:MocaTree.Node {
		name := "td"
		index := 0
		++ - parentNode->tr
	}
	++docu:MocaTree.Node {
		name := "td"
		index := 1
		++ - parentNode->tr
	}
}

#correspondence {
	++ methodToTr :EOperationToNode {
		#src->src__method
		#trg->tr
	}
}

#attributeConditions {
	eq (src__method.name, ref.name)
}


#using SimpleEcoreToHTML.*

#rule EOperationTableBridge #with SimpleEcoreToHTML

#source {
	method:ecore.EOperation {
		++ - eContainingClass->eclass
	}
	eclass:ecore.EClass
}

#target {
	tr:MocaTree.Node {
		name == "tr"
		++ - parentNode->methodTable
	}
	methodTable:MocaTree.Node {
		name == "table"
		index == 3
	}
}

#correspondence {
	eclassToMethodTable :EClassToMethodTable {
		#src->eclass
		#trg->methodTable
	}
	methodToTr :EOperationToNode {
		#src->method
		#trg->tr
	}
}


#using SimpleEcoreToHTML.*

#rule IgnoreFileDocumentation #with SimpleEcoreToHTML

#target {
	documentation:MocaTree.Node {
		index == 1
		name == "p"
	}
	++docu:MocaTree.Text {
		++ - parentNode->documentation
	}
}


#using SimpleEcoreToHTML.*

#rule DocumentMoflonMethod #extends DocumentMethod #with SimpleEcoreToHTML

#source {
	++src__method:SDMLanguage.activities.MoflonEOperation
}


#using SimpleEcoreToHTML.*

#rule DocumentInheritance #with SimpleEcoreToHTML

#source {
	superClass:ecore.EClass
	subClass:ecore.EClass {
		++ - eSuperTypes->superClass
	}
}

#target {
	++tr:MocaTree.Node {
		name := "tr"
		++ - parentNode->tableOfSubClass
	}
	++link:MocaTree.Link {
		++ - targets->tableOfSuperClass
	}
	tableOfSuperClass:MocaTree.Node
	tableOfSubClass:MocaTree.Node {
		++ - links->link
	}
	++ref:MocaTree.Text {
		++ - parentNode->td
	}
	++td:MocaTree.Node {
		name := "td"
		index := 0
		++ - parentNode->tr
	}
}

#correspondence {
	superClassToTableOfSuperClass :EClassToSuperClassesTable {
		#src->superClass
		#trg->tableOfSuperClass
	}
	subClassToTableOfSubClass :EClassToSuperClassesTable {
		#src->subClass
		#trg->tableOfSubClass
	}
}

#attributeConditions {
	eq (superClass.name, ref.name)
}


#using SimpleEcoreToHTML.*

#rule EClassToHTMLFile #extends HTMLFileAndHeader #with SimpleEcoreToHTML

#source {
	++eclass:ecore.EClass
}

#target {
	++methods:MocaTree.Text {
		name := "Methods of this class: "
		++ - parentNode->h3
	}
	++methodTable:MocaTree.Node {
		index := 3
		name := "table"
		++ - parentNode->body
	}
	++h3_forSuperClasses:MocaTree.Node {
		index := 4
		name := "h3"
		++ - parentNode->body
	}
	++htmlFile:MocaTree.File
	++title:MocaTree.Text
	++superClassesTable:MocaTree.Node {
		name := "table"
		index := 5
		++ - parentNode->body
	}
	++body:MocaTree.Node {
		name := "body"
	}
	++h3:MocaTree.Node {
		index := 2
		name := "h3"
		++ - parentNode->body
	}
	++allSupers:MocaTree.Text {
		name := "All Known Super Classes: "
		++ - parentNode->h3_forSuperClasses
	}
}

#correspondence {
	++ eclassToSuperClassesTable :EClassToSuperClassesTable {
		#src->eclass
		#trg->superClassesTable
	}
	++ eclassToMethodTable :EClassToMethodTable {
		#src->eclass
		#trg->methodTable
	}
	++ eclassToHtmlFile :EClassToFile {
		#src->eclass
		#trg->htmlFile
	}
}

#attributeConditions {
	addSuffix (eclass.name, ".html", htmlFile.name)
	addPrefix ("EClass ", eclass.name, title.name)
}


#using SimpleEcoreToHTML.*

#rule IgnoreMethodDocumentation #with SimpleEcoreToHTML

#target {
	++docu:MocaTree.Text {
		++ - parentNode->documentation
	}
	documentation:MocaTree.Node {
		name == "td"
		index == 1
	}
}


#using SimpleEcoreToHTML.*

#rule EClassFileBridge #with SimpleEcoreToHTML

#source {
	epackage:ecore.EPackage {
		++ - eClassifiers->eclass
	}
	eclass:ecore.EClass
}

#target {
	docuFolder:MocaTree.Folder {
		++ - file->htmlFile
	}
	htmlFile:MocaTree.File
}

#correspondence {
	eclassToHtmlFile :EClassToFile {
		#src->eclass
		#trg->htmlFile
	}
	epackageToDocuFolder :EPackageToFolder {
		#src->epackage
		#trg->docuFolder
	}
}


#using SimpleEcoreToHTML.*

#abstract #rule HTMLFileAndHeader #with SimpleEcoreToHTML

#target {
	++header:MocaTree.Node {
		index := 0
		name := "h1"
		++ - parentNode->body
	}
	++documentation:MocaTree.Node {
		name := "p"
		index := 1
		++ - parentNode->body
	}
	++body:MocaTree.Node {
		name := "body"
		++ - parentNode->rootNode
	}
	++rootNode:MocaTree.Node {
		name := "html"
		++ - file->htmlFile
	}
	++htmlFile:MocaTree.File
	++title:MocaTree.Text {
		++ - parentNode->header
	}
}


#using SimpleEcoreToHTML.*

#rule RootPackageToDocuFolder #extends HTMLFileAndHeader #with SimpleEcoreToHTML

#source {
	++rootPackage:ecore.EPackage
}

#target {
	++htmlFile:MocaTree.File
	++title:MocaTree.Text {
		name := "Outermost-Package:  Documentation for Project-Root"
	}
	++docuFolder:MocaTree.Folder {
		++ - file->htmlFile
	}
}

#correspondence {
	++ rootPackageToDocuFolder :EPackageToFolder {
		#src->rootPackage
		#trg->docuFolder
	}
}

#attributeConditions {
	addSuffix (rootPackage.name, ".html", ^withSuffix)
	eq (rootPackage.name, docuFolder.name)
	addPrefix ("__", ^withSuffix, htmlFile.name)
}


#using SimpleEcoreToHTML.*

#rule SubPackageToDocuFolder #extends HTMLFileAndHeader #with SimpleEcoreToHTML

#source {
	++rootPackage:ecore.EPackage
	superPackage:ecore.EPackage {
		++ - eSubpackages->rootPackage
	}
}

#target {
	++docuFolder:MocaTree.Folder {
		++ - file->htmlFile
	}
	++title:MocaTree.Text {
		name := "Documentation for Subpackage"
	}
	++htmlFile:MocaTree.File
	rootFolder:MocaTree.Folder {
		++ - subFolder->docuFolder
	}
}

#correspondence {
	++ rootPackageToDocuFolder :EPackageToFolder {
		#src->rootPackage
		#trg->docuFolder
	}
	superPackageToRootFolder :EPackageToFolder {
		#src->superPackage
		#trg->rootFolder
	}
}

#attributeConditions {
	eq (rootPackage.name, docuFolder.name)
	addPrefix ("__", ^withSuffix, htmlFile.name)
	addSuffix (rootPackage.name, ".html", ^withSuffix)
}


