#import "platform:/plugin/Families/model/Families.ecore"
#import "platform:/plugin/Persons/model/Persons.ecore"

#schema FamiliesToPersonsRefinementHierachical

#source {
	Families
}

#target {
	Persons
}

#correspondence {
	MemberToDaughter {
		#src->Families.Member
		#trg->Persons.Daughter
	}
	MemberToFather {
		#src->Families.Member
		#trg->Persons.Father
	}
	MemberToMother {
		#src->Families.Member
		#trg->Persons.Mother
	}
	FamilyToPerson {
		#src->Families.Family
		#trg->Persons.Person
	}
	FamilyRegisterToPersonsRegister {
		#src->Families.FamilyRegister
		#trg->Persons.PersonsRegister
	}
	MemberToSon {
		#src->Families.Member
		#trg->Persons.Son
	}
	FamilyToFather {
		#src->Families.Family
		#trg->Persons.Father
	}
}

#attributeConditions {
	concat(1:EString, 0:EString, 3:EString, 2:EString) {
		#sync: BFFB, BBBF, BBFB, BBBB, BFBB
		#gen: BBFF, BBBB, BFFB, BBFB, BFBF, BFFF, BFBB, BBBF
	}
}


#using FamiliesToPersonsRefinementHierachical.*

#abstract #rule MemberToPersonRule #with FamiliesToPersonsRefinementHierachical

#source {
	++family:Families.Family
	familyRegister:Families.FamilyRegister {
		++ - families->family
	}
	++member:Families.Member
}

#target {
	++person:Persons.Person
	personsRegister:Persons.PersonsRegister {
		++ - person->person
	}
}

#correspondence {
	familyRegisterToPersonsRegister :FamilyRegisterToPersonsRegister {
		#src->familyRegister
		#trg->personsRegister
	}
}

#attributeConditions {
	concat (" ", member.firstName, family.lastName, person.fullName)
}


#using FamiliesToPersonsRefinementHierachical.*

#rule FamilyRegisterToPersonRegisterRule #with FamiliesToPersonsRefinementHierachical

#source {
	++familyRegister:Families.FamilyRegister
}

#target {
	++personsRegister:Persons.PersonsRegister
}

#correspondence {
	++ familyRegisterToPersonsRegister :FamilyRegisterToPersonsRegister {
		#src->familyRegister
		#trg->personsRegister
	}
}


#using FamiliesToPersonsRefinementHierachical.*

#rule MemberToMotherRule #extends MemberToNonFatherRule #with FamiliesToPersonsRefinementHierachical

#source {
	++member:Families.Member
	family:Families.Family {
		++ - mother->member
	}
}

#target {
	++person:Persons.Mother
}

#correspondence {
	++ memberToMother :MemberToMother {
		#src->member
		#trg->person
	}
}


#using FamiliesToPersonsRefinementHierachical.*

#rule MemberToFatherRule #extends MemberToPersonRule #with FamiliesToPersonsRefinementHierachical

#source {
	++member:Families.Member
	++family:Families.Family {
		++ - father->member
	}
}

#target {
	++person:Persons.Father
}

#correspondence {
	++ familyToFather :FamilyToFather {
		#src->family
		#trg->person
	}
	++ memberToFather :MemberToFather {
		#src->member
		#trg->person
	}
}


#using FamiliesToPersonsRefinementHierachical.*

#rule MemberToDaughterRule #extends MemberToNonFatherRule #with FamiliesToPersonsRefinementHierachical

#source {
	++member:Families.Member
	family:Families.Family {
		++ - daughters->member
	}
}

#target {
	++person:Persons.Daughter
}

#correspondence {
	++ memberToDaughter :MemberToDaughter {
		#src->member
		#trg->person
	}
}


#using FamiliesToPersonsRefinementHierachical.*

#rule MemberToSonRule #extends MemberToNonFatherRule #with FamiliesToPersonsRefinementHierachical

#source {
	++member:Families.Member
	family:Families.Family {
		++ - sons->member
	}
}

#target {
	++person:Persons.Son
}

#correspondence {
	++ memberToSon :MemberToSon {
		#src->member
		#trg->person
	}
}


#using FamiliesToPersonsRefinementHierachical.*

#abstract #rule MemberToNonFatherRule #extends MemberToPersonRule #with FamiliesToPersonsRefinementHierachical

#source {
	familyRegister:Families.FamilyRegister {
		- families->family
	}
	family:Families.Family
}

#target {
	father:Persons.Father
	personsRegister:Persons.PersonsRegister {
		- person->father
	}
}

#correspondence {
	familyToFather :FamilyToFather {
		#src->family
		#trg->father
	}
}


