#import "platform:/plugin/BlockDiagram/model/BlockDiagram.ecore"
#import "platform:/plugin/MocaTree/model/MocaTree.ecore"

#schema BlockDiagramCodeAdapter

#source {
	BlockDiagram
}

#target { 
	MocaTree
}

#correspondence {
	PortToNode {
		#src->BlockDiagram.Port
		#trg->MocaTree.Node
	}
	BlockToNode {
		#src->BlockDiagram.Block
		#trg->MocaTree.Node
	}
	SystemToNode {
		#src->BlockDiagram.BlockSystem
		#trg->MocaTree.Node
	}
	RequireToNode #extends PortToNode
	ConnectorToNode {
		#src->BlockDiagram.Connector
		#trg->MocaTree.Node
	}
	ProvideToNode #extends PortToNode
}

#attributeConditions {
	eq(0: , 1: ) {
		#sync: FB, BB, BF
		#gen: BF, FF, FB, BB
	}
}


#using BlockDiagramCodeAdapter.*

#rule AbstractRequireToNodeRule #with BlockDiagramCodeAdapter

#source {
	++port:BlockDiagram.Require
}

#target {
	++portNode:MocaTree.Node {
		name := "REQUIRE"
	}
}

#correspondence {
	++ requireToNode :RequireToNode {
		#src->port
		#trg->portNode
	}
}


#using BlockDiagramCodeAdapter.*

#rule SystemToNodeRule #with BlockDiagramCodeAdapter

#source {
	++system:BlockDiagram.BlockSystem
}

#target {
	++file:MocaTree.File
	++node:MocaTree.Node {
		name := "System"
		++ - file->file
	}
}

#correspondence {
	++ systemToNode :SystemToNode {
		#src->system
		#trg->node
	}
}

#attributeConditions {
	eq (system.name, file.name)
}


#using BlockDiagramCodeAdapter.*

#rule ProvideToNodeRule #extends AbstractProvideToNodeRule, AbstractBlockToNodeRule #with BlockDiagramCodeAdapter


#using BlockDiagramCodeAdapter.*

#rule ConnectorToNodeRule #with BlockDiagramCodeAdapter

#source {
	!noConnector:BlockDiagram.Connector
	++connector:BlockDiagram.Connector
	providerBlock:BlockDiagram.Block
	provide:BlockDiagram.Provide {
		++ - connector->connector
		- block->providerBlock
	}
	require:BlockDiagram.Require {
		- connector->noConnector
		++ - connector->connector
	}
}

#target {
	systemNode:MocaTree.Node {
		name == "System"
	}
	providerBlockNode:MocaTree.Node {
		- parentNode->systemNode
	}
	requireNode:MocaTree.Node {
		- parentNode->requireBlockNode
	}
	requireBlockNode:MocaTree.Node {
		- parentNode->systemNode
	}
	++connectorNode:MocaTree.Node {
		name := "CONNECTOR"
		++ - attribute->referencedPort
		++ - attribute->referencedBlock
		++ - parentNode->requireNode
	}
	provideNode:MocaTree.Node {
		- parentNode->providerBlockNode
	}
	++referencedBlock:MocaTree.Attribute {
		name := "block"
		index := 1
	}
	++referencedPort:MocaTree.Attribute {
		name := "port"
		index := 0
	}
}

#correspondence {
	provideToNode :ProvideToNode {
		#src->provide
		#trg->provideNode
	}
	requireToNode :RequireToNode {
		#src->require
		#trg->requireNode
	}
	++ connectorToNode :ConnectorToNode {
		#src->connector
		#trg->connectorNode
	}
}

#attributeConditions {
	eq (provide.id, referencedPort.value)
	eq (providerBlock.id, referencedBlock.value)
}


#using BlockDiagramCodeAdapter.*

#rule RequireToNodeRule #extends AbstractRequireToNodeRule, AbstractBlockToNodeRule #with BlockDiagramCodeAdapter


#using BlockDiagramCodeAdapter.*

#rule BlockToNodeRule #with BlockDiagramCodeAdapter

#source {
	system:BlockDiagram.BlockSystem {
		++ - blocks->block
	}
	++block:BlockDiagram.Block
}

#target {
	++id:MocaTree.Attribute {
		name := "id"
	}
	systemNode:MocaTree.Node
	++blockNode:MocaTree.Node {
		name := "Block"
		++ - parentNode->systemNode
		++ - attribute->id
	}
}

#correspondence {
	systemToNode :SystemToNode {
		#src->system
		#trg->systemNode
	}
	++ blockToNode :BlockToNode {
		#src->block
		#trg->blockNode
	}
}

#attributeConditions {
	eq (block.id, id.value)
}


#using BlockDiagramCodeAdapter.*

#rule AbstractProvideToNodeRule #with BlockDiagramCodeAdapter

#source {
	++port:BlockDiagram.Provide
}

#target {
	++portNode:MocaTree.Node {
		name := "PROVIDE"
	}
}

#correspondence {
	++ portToPortNode :ProvideToNode {
		#src->port
		#trg->portNode
	}
}


#using BlockDiagramCodeAdapter.*

#abstract #rule AbstractBlockToNodeRule #with BlockDiagramCodeAdapter

#source {
	block:BlockDiagram.Block
	++port:BlockDiagram.Port {
		++ - block->block
	}
}

#target {
	++portNode:MocaTree.Node {
		++ - parentNode->node
		++ - attribute->id
	}
	node:MocaTree.Node
	++id:MocaTree.Attribute {
		name := "id"
	}
}

#correspondence {
	blockToNode :BlockToNode {
		#src->block
		#trg->node
	}
	++ portToNode :PortToNode {
		#src->port
		#trg->portNode
	}
}

#attributeConditions {
	eq (port.id, id.value)
}


