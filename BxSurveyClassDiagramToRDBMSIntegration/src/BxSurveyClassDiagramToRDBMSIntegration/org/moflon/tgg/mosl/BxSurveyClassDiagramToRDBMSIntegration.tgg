#import "platform:/plugin/BxSurveyClassDiagram/model/BxSurveyClassDiagram.ecore"
#import "platform:/plugin/BxSurveyDatabase/model/BxSurveyDatabase.ecore"

#schema BxSurveyClassDiagramToRDBMSIntegration

#source {
	BxSurveyClassDiagram
}

#target {
	BxSurveyDatabase
}

#correspondence {
	AssociationToColumn {
		#src->BxSurveyClassDiagram.BxAssociation
		#trg->BxSurveyDatabase.BxColumn
	}
	ClazzToTable {
		#src->BxSurveyClassDiagram.BxClazz
		#trg->BxSurveyDatabase.BxTable
	}
	ClassDiagramToSchema {
		#src->BxSurveyClassDiagram.BxClassDiagram
		#trg->BxSurveyDatabase.BxSchema
	}
}

#attributeConditions {
	#userDefined concat_specific(0:EString, 3:EString, 2:EString, 1:EString) {
		#sync: BFFB, BFBB, BBBB, BBFB, BBBF
		#gen: BFBF, BFFF, BBFF
	}
	stringToInt(0:EString, 1:EInt) {
		#sync: FB, BB, BF
		#gen: BB, FB, FF, BF
	}
	eq(0: , 1: ) {
		#sync: BF, BB, FB
		#gen: FF, FB, BF, BB
	}
}


#using BxSurveyClassDiagramToRDBMSIntegration.*

#rule ClassDiagramToSchemaRule #with BxSurveyClassDiagramToRDBMSIntegration

#source {
	++diagram:BxSurveyClassDiagram.BxClassDiagram
}

#target {
	++schema:BxSurveyDatabase.BxSchema
}

#correspondence {
	++ diagram2schema :ClassDiagramToSchema {
		#src->diagram
		#trg->schema
	}
}

#attributeConditions {
	eq (diagram.name, schema.description)
}


#using BxSurveyClassDiagramToRDBMSIntegration.*

#rule SubclassAssociationToColumnRule #with BxSurveyClassDiagramToRDBMSIntegration

#source {
	++assoc:BxSurveyClassDiagram.BxAssociation {
		++ - target->trgClass
		++ - source->srcClass
	}
	trgClass:BxSurveyClassDiagram.BxClazz
	diagram:BxSurveyClassDiagram.BxClassDiagram {
		++ - elements->assoc
		- elements->srcClass
		- elements->trgClass
	}
	srcClass:BxSurveyClassDiagram.BxClazz
}

#target {
	pk:BxSurveyDatabase.BxColumn {
		name == "PK"
	}
	table:BxSurveyDatabase.BxTable {
		++ - columns->fk
		- columns->pk
	}
	++fk:BxSurveyDatabase.BxColumn {
		++ - ref->pk
	}
}

#correspondence {
	++ associationToColumn :AssociationToColumn {
		#src->assoc
		#trg->fk
	}
	trgClazzToTable :ClazzToTable {
		#src->trgClass
		#trg->table
	}
	srcClazzToTable :ClazzToTable {
		#src->srcClass
		#trg->table
	}
}

#attributeConditions {
	stringToInt (^temp, assoc.id)
	concat_specific ("::", assoc.name, ^temp, fk.name)
}


#using BxSurveyClassDiagramToRDBMSIntegration.*

#rule SubclassToTableRule #with BxSurveyClassDiagramToRDBMSIntegration

#source {
	diagram:BxSurveyClassDiagram.BxClassDiagram {
		++ - elements->subclass
		- elements->superClass
	}
	++subclass:BxSurveyClassDiagram.BxClazz {
		++ - super->superClass
	}
	superClass:BxSurveyClassDiagram.BxClazz
}

#target {
	table:BxSurveyDatabase.BxTable
}

#correspondence {
	++ subclazzToTable :ClazzToTable {
		#src->subclass
		#trg->table
	}
	clazzToTable :ClazzToTable {
		#src->superClass
		#trg->table
	}
}


#using BxSurveyClassDiagramToRDBMSIntegration.*

#rule ClassToTableRule #with BxSurveyClassDiagramToRDBMSIntegration

#source {
	++clazz:BxSurveyClassDiagram.BxClazz
	diagram:BxSurveyClassDiagram.BxClassDiagram {
		++ - elements->clazz
	}
}

#target {
	++pk:BxSurveyDatabase.BxColumn {
		name := "PK"
	}
	++table:BxSurveyDatabase.BxTable {
		++ - columns->pk
	}
	schema:BxSurveyDatabase.BxSchema {
		++ - tables->table
	}
}

#correspondence {
	diagram2schema :ClassDiagramToSchema {
		#src->diagram
		#trg->schema
	}
	++ clazz2table :ClazzToTable {
		#src->clazz
		#trg->table
	}
}

#attributeConditions {
	concat_specific ("_", clazz.name, ^temp, table.UID)
	stringToInt (^temp, clazz.id)
}


#using BxSurveyClassDiagramToRDBMSIntegration.*

#rule SelfAssocToColumnRule #with BxSurveyClassDiagramToRDBMSIntegration

#source {
	clazz:BxSurveyClassDiagram.BxClazz
	++assoc:BxSurveyClassDiagram.BxAssociation {
		++ - source->clazz
		++ - target->clazz
	}
	diagram:BxSurveyClassDiagram.BxClassDiagram {
		++ - elements->assoc
		- elements->clazz
	}
}

#target {
	pk:BxSurveyDatabase.BxColumn {
		name == "PK"
	}
	++fk:BxSurveyDatabase.BxColumn {
		++ - ref->pk
	}
	table:BxSurveyDatabase.BxTable {
		++ - columns->fk
		- columns->pk
	}
}

#correspondence {
	++ assoc2col :AssociationToColumn {
		#src->assoc
		#trg->fk
	}
	assocSrc2table :ClazzToTable {
		#src->clazz
		#trg->table
	}
}

#attributeConditions {
	concat_specific ("::", assoc.name, ^temp, fk.name)
	stringToInt (^temp, assoc.id)
}


#using BxSurveyClassDiagramToRDBMSIntegration.*

#rule AssociationToColumnRule #with BxSurveyClassDiagramToRDBMSIntegration

#source {
	assocTrg:BxSurveyClassDiagram.BxClazz
	diagram:BxSurveyClassDiagram.BxClassDiagram {
		- elements->assocSrc
		++ - elements->assoc
		- elements->assocTrg
	}
	assocSrc:BxSurveyClassDiagram.BxClazz
	++assoc:BxSurveyClassDiagram.BxAssociation {
		++ - target->assocTrg
		++ - source->assocSrc
	}
}

#target {
	table:BxSurveyDatabase.BxTable {
		++ - columns->fk
	}
	pk:BxSurveyDatabase.BxColumn {
		name == "PK"
	}
	foreignTable:BxSurveyDatabase.BxTable {
		- columns->pk
	}
	++fk:BxSurveyDatabase.BxColumn {
		++ - ref->pk
	}
}

#correspondence {
	++ assoc2col :AssociationToColumn {
		#src->assoc
		#trg->fk
	}
	assocSrc2table :ClazzToTable {
		#src->assocSrc
		#trg->table
	}
	assocTrg2foreignTable :ClazzToTable {
		#src->assocTrg
		#trg->foreignTable
	}
}

#attributeConditions {
	stringToInt (^temp, assoc.id)
	concat_specific ("::", assoc.name, ^temp, fk.name)
}


