#import "platform:/plugin/MocaTree/model/MocaTree.ecore"
#import "platform:/plugin/ProcessDefinition_EdgeRules/model/ProcessDefinition_EdgeRules.ecore"

#schema ProcessCodeAdapter_EdgeRules

#source {
	MocaTree
}

#target {
	ProcessDefinition_EdgeRules
}

#correspondence {
	FolderToSystem {
		#src->MocaTree.Folder
		#trg->ProcessDefinition_EdgeRules.SystemModule
	}
	NodeToImportSrc {
		#src->MocaTree.Node
		#trg->ProcessDefinition_EdgeRules.Task
	}
	NodeToInvocationSrc {
		#src->MocaTree.Node
		#trg->ProcessDefinition_EdgeRules.Task
	}
	FileToTask {
		#src->MocaTree.File
		#trg->ProcessDefinition_EdgeRules.Task
	}
	NodeToImportTrg {
		#src->MocaTree.Node
		#trg->ProcessDefinition_EdgeRules.Module
	}
	FolderToModule {
		#src->MocaTree.Folder
		#trg->ProcessDefinition_EdgeRules.Module
	}
	NodeToInvocationTrg {
		#src->MocaTree.Node
		#trg->ProcessDefinition_EdgeRules.Task
	}
}

#attributeConditions {
	eq(1: , 0: ) {
		#sync: FB, BF, BB
		#gen: BB, FB, BF, FF
	}
	addPrefix(0:EString, 2:EString, 1:EString) {
		#sync: BBF, BBB, BFB, FBB
		#gen: FBB, BBF, BFF, FBF, BFB, BBB
	}
}


#using ProcessCodeAdapter_EdgeRules.*

#rule FileToTaskEdgeRule #with ProcessCodeAdapter_EdgeRules

#source {
	file:MocaTree.File
	folder:MocaTree.Folder {
		++ - file->file
	}
}

#target {
	system:ProcessDefinition_EdgeRules.SystemModule {
		- allModules->module
	}
	module:ProcessDefinition_EdgeRules.Module
	task:ProcessDefinition_EdgeRules.Task {
		++ - systemModule->system
		++ - module->module
	}
}

#correspondence {
	folderToModule :FolderToModule {
		#src->folder
		#trg->module
	}
	fileToTask :FileToTask {
		#src->file
		#trg->task
	}
}


#using ProcessCodeAdapter_EdgeRules.*

#rule FileToTaskRule #with ProcessCodeAdapter_EdgeRules

#source {
	++file:MocaTree.File
	++importNode:MocaTree.Node {
		name := "IMPORTS"
		++ - parentNode->taskNode
	}
	++taskNode:MocaTree.Node {
		name := "TASK"
		++ - file->file
	}
	++invocationNode:MocaTree.Node {
		name := "INVOCATIONS"
		++ - parentNode->taskNode
	}
}

#target {
	++task:ProcessDefinition_EdgeRules.Task
}

#correspondence {
	++ fileToTask :FileToTask {
		#src->file
		#trg->task
	}
}

#attributeConditions {
	addPrefix (task.id, ".proc", file.name)
}


#using ProcessCodeAdapter_EdgeRules.*

#rule NodeToImportRule #with ProcessCodeAdapter_EdgeRules

#source {
	rootFolder:MocaTree.Folder {
		- subFolder->otherFolder
		- subFolder->folder
	}
	++importNode:MocaTree.Node {
		++ - parentNode->invocationsNode
	}
	otherFolder:MocaTree.Folder
	folder:MocaTree.Folder {
		- file->file
	}
	taskNode:MocaTree.Node {
		- file->file
	}
	file:MocaTree.File
	invocationsNode:MocaTree.Node {
		name == "IMPORTS"
		- parentNode->taskNode
	}
}

#target {
	module:ProcessDefinition_EdgeRules.Module
	system:ProcessDefinition_EdgeRules.SystemModule {
		- allModules->importedModule
		- allModules->module
	}
	task:ProcessDefinition_EdgeRules.Task {
		- module->module
		++ - imports->importedModule
	}
	importedModule:ProcessDefinition_EdgeRules.Module
}

#correspondence {
	fileToTask :FileToTask {
		#src->file
		#trg->task
	}
	++ nodeToImportTrg :NodeToImportTrg {
		#src->importNode
		#trg->importedModule
	}
	++ nodeToImportSrc :NodeToImportSrc {
		#src->importNode
		#trg->task
	}
	fileToImportedModule :FolderToModule {
		#src->otherFolder
		#trg->importedModule
	}
}

#attributeConditions {
	eq (importNode.name, otherFolder.name)
}


#using ProcessCodeAdapter_EdgeRules.*

#rule NodeToInvocationRecursiveRule #with ProcessCodeAdapter_EdgeRules

#source {
	file:MocaTree.File
	++invocationNode:MocaTree.Node {
		++ - parentNode->invocationsNode
	}
	invocationsNode:MocaTree.Node {
		name == "INVOCATIONS"
		- parentNode->taskNode
	}
	taskNode:MocaTree.Node {
		- file->file
	}
}

#target {
	task:ProcessDefinition_EdgeRules.Task {
		++ - invocations->task
	}
}

#correspondence {
	++ nodeToInvocationTrg :NodeToInvocationTrg {
		#src->invocationNode
		#trg->task
	}
	++ nodeToInvocationSrc :NodeToInvocationSrc {
		#src->invocationNode
		#trg->task
	}
	fileToTask :FileToTask {
		#src->file
		#trg->task
	}
}

#attributeConditions {
	addPrefix (invocationNode.name, ".proc", file.name)
}


#using ProcessCodeAdapter_EdgeRules.*

#rule SubFolderToModuleRule #with ProcessCodeAdapter_EdgeRules

#source {
	rootFolder:MocaTree.Folder {
		++ - subFolder->subFolder
	}
	++subFolder:MocaTree.Folder
}

#target {
	++module:ProcessDefinition_EdgeRules.Module
	system:ProcessDefinition_EdgeRules.SystemModule {
		++ - allModules->module
	}
}

#correspondence {
	++ subFolderToModule :FolderToModule {
		#src->subFolder
		#trg->module
	}
	folderToSystem :FolderToSystem {
		#src->rootFolder
		#trg->system
	}
}

#attributeConditions {
	eq (subFolder.name, module.description)
}


#using ProcessCodeAdapter_EdgeRules.*

#rule NodeToInvocationDifferentModuleRule #with ProcessCodeAdapter_EdgeRules

#source {
	file:MocaTree.File
	taskNode:MocaTree.Node {
		- file->file
	}
	otherFile:MocaTree.File
	++invocationNode:MocaTree.Node {
		++ - parentNode->invocationsNode
	}
	invocationsNode:MocaTree.Node {
		name == "INVOCATIONS"
		- parentNode->taskNode
	}
	rootFolder:MocaTree.Folder {
		- subFolder->folder
		- subFolder->otherFolder
	}
	folder:MocaTree.Folder {
		- file->file
	}
	otherFolder:MocaTree.Folder {
		- file->otherFile
	}
}

#target {
	otherModule:ProcessDefinition_EdgeRules.Module
	module:ProcessDefinition_EdgeRules.Module
	system:ProcessDefinition_EdgeRules.SystemModule
	invokedTask:ProcessDefinition_EdgeRules.Task {
		- systemModule->system
		- module->otherModule
	}
	task:ProcessDefinition_EdgeRules.Task {
		++ - invocations->invokedTask
		- module->module
		- systemModule->system
	}
}

#correspondence {
	fileToTask :FileToTask {
		#src->file
		#trg->task
	}
	moduleToFolder :FolderToModule {
		#src->folder
		#trg->module
	}
	fileToInvokedTask :FileToTask {
		#src->otherFile
		#trg->invokedTask
	}
	++ nodeToInvocationSrc :NodeToInvocationSrc {
		#src->invocationNode
		#trg->task
	}
	++ nodeToInvocationTrg :NodeToInvocationTrg {
		#src->invocationNode
		#trg->invokedTask
	}
	otherModuleToOtherFolder :FolderToModule {
		#src->otherFolder
		#trg->otherModule
	}
}

#attributeConditions {
	addPrefix (invocationNode.name, ".proc", otherFile.name)
}


#using ProcessCodeAdapter_EdgeRules.*

#rule RootToSystemRule #with ProcessCodeAdapter_EdgeRules

#source {
	++rootFolder:MocaTree.Folder
}

#target {
	++system:ProcessDefinition_EdgeRules.SystemModule
}

#correspondence {
	++ rootFolderToSystem :FolderToSystem {
		#src->rootFolder
		#trg->system
	}
}

#attributeConditions {
	eq (rootFolder.name, system.name)
}


#using ProcessCodeAdapter_EdgeRules.*

#rule NodeToInvocationRule #with ProcessCodeAdapter_EdgeRules

#source {
	++invocationNode:MocaTree.Node {
		++ - parentNode->invocationsNode
	}
	folder:MocaTree.Folder {
		- file->file
		- file->otherFile
	}
	taskNode:MocaTree.Node {
		- file->file
	}
	invocationsNode:MocaTree.Node {
		name == "INVOCATIONS"
		- parentNode->taskNode
	}
	otherFile:MocaTree.File
	file:MocaTree.File
}

#target {
	invokedTask:ProcessDefinition_EdgeRules.Task {
		- systemModule->system
	}
	task:ProcessDefinition_EdgeRules.Task {
		- systemModule->system
		++ - invocations->invokedTask
	}
	system:ProcessDefinition_EdgeRules.SystemModule
}

#correspondence {
	fileToInvokedTask :FileToTask {
		#src->otherFile
		#trg->invokedTask
	}
	fileToTask :FileToTask {
		#src->file
		#trg->task
	}
	++ nodeToInvocationSrc :NodeToInvocationSrc {
		#src->invocationNode
		#trg->task
	}
	++ nodeToInvocationTrg :NodeToInvocationTrg {
		#src->invocationNode
		#trg->invokedTask
	}
}

#attributeConditions {
	addPrefix (invocationNode.name, ".proc", otherFile.name)
}


