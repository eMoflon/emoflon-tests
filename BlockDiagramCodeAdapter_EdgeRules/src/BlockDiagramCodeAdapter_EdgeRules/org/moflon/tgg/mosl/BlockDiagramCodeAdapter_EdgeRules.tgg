#import "platform:/plugin/BlockDiagram_EdgeRules/model/BlockDiagram_EdgeRules.ecore"
#import "platform:/plugin/MocaTree/model/MocaTree.ecore"

#schema BlockDiagramCodeAdapter_EdgeRules

#source {
	BlockDiagram_EdgeRules
}

#target {
	MocaTree
}

#correspondence {
	RequirementToNodeSrc {
		#src->BlockDiagram_EdgeRules.Require
		#trg->MocaTree.Node
	}
	BlockToNode {
		#src->BlockDiagram_EdgeRules.Block
		#trg->MocaTree.Node
	}
	SystemToNode {
		#src->BlockDiagram_EdgeRules.BlockSystem
		#trg->MocaTree.Node
	}
	PortToNode {
		#src->BlockDiagram_EdgeRules.Port
		#trg->MocaTree.Node
	}
	RequirementToNodeTrg {
		#src->BlockDiagram_EdgeRules.Provide
		#trg->MocaTree.Node
	}
	ProvideToNode #extends PortToNode
	RequireToNode #extends PortToNode
}

#attributeConditions {
	eq(0: , 1: ) {
		#sync: FB, BB, BF
		#gen: FB, FF, BB, BF
	}
}


#using BlockDiagramCodeAdapter_EdgeRules.*

#rule BlockToNodeRule #with BlockDiagramCodeAdapter_EdgeRules

#source {
	system:BlockDiagram_EdgeRules.BlockSystem {
		++ - blocks->block
	}
	++block:BlockDiagram_EdgeRules.Block
}

#target {
	++blockNode:MocaTree.Node {
		name := "Block"
		++ - attribute->id
		++ - parentNode->systemNode
	}
	systemNode:MocaTree.Node
	++id:MocaTree.Attribute {
		name := "id"
	}
}

#correspondence {
	++ blockToNode :BlockToNode {
		#src->block
		#trg->blockNode
	}
	systemToNode :SystemToNode {
		#src->system
		#trg->systemNode
	}
}

#attributeConditions {
	eq (block.id, id.value)
}


#using BlockDiagramCodeAdapter_EdgeRules.*

#rule RequireToNodeRule #with BlockDiagramCodeAdapter_EdgeRules

#source {
	++require:BlockDiagram_EdgeRules.Require
}

#target {
	++id:MocaTree.Attribute {
		name := "id"
	}
	++requireNode:MocaTree.Node {
		name := "REQUIRE"
		++ - attribute->id
	}
}

#correspondence {
	++ requireToNode :RequireToNode {
		#src->require
		#trg->requireNode
	}
}

#attributeConditions {
	eq (require.id, id.value)
}


#using BlockDiagramCodeAdapter_EdgeRules.*

#rule ProvideToNodeRule #with BlockDiagramCodeAdapter_EdgeRules

#source {
	++provide:BlockDiagram_EdgeRules.Provide
}

#target {
	++id:MocaTree.Attribute {
		name := "id"
	}
	++provideNode:MocaTree.Node {
		name := "PROVIDE"
		++ - attribute->id
	}
}

#correspondence {
	++ provideToNode :ProvideToNode {
		#src->provide
		#trg->provideNode
	}
}

#attributeConditions {
	eq (provide.id, id.value)
}


#using BlockDiagramCodeAdapter_EdgeRules.*

#rule ConnectorToNodeRule #with BlockDiagramCodeAdapter_EdgeRules

#source {
	providerBlock:BlockDiagram_EdgeRules.Block {
		- ports->provide
	}
	requireBlock:BlockDiagram_EdgeRules.Block {
		- ports->require
	}
	provide:BlockDiagram_EdgeRules.Provide
	system:BlockDiagram_EdgeRules.BlockSystem {
		- blocks->providerBlock
		- blocks->requireBlock
	}
	require:BlockDiagram_EdgeRules.Require {
		++ - requirement->provide
	}
}

#target {
	providerIdAttr:MocaTree.Attribute {
		name == "id"
	}
	requireNode:MocaTree.Node {
		name == "REQUIRE"
		- parentNode->requireBlockNode
	}
	providerBlockNode:MocaTree.Node {
		name == "Block"
		- attribute->providerBlockIdAttr
		- parentNode->systemNode
	}
	systemNode:MocaTree.Node
	requireBlockNode:MocaTree.Node {
		name == "Block"
		- parentNode->systemNode
	}
	provideNode:MocaTree.Node {
		name == "PROVIDE"
		- parentNode->providerBlockNode
		- attribute->providerIdAttr
	}
	++referencedBlock:MocaTree.Attribute {
		name := "block"
		index := 1
	}
	++referencedPort:MocaTree.Attribute {
		name := "port"
		index := 0
	}
	++connectorNode:MocaTree.Node {
		name := "CONNECTOR"
		++ - attribute->referencedBlock
		++ - parentNode->requireNode
		++ - attribute->referencedPort
	}
	providerBlockIdAttr:MocaTree.Attribute {
		name == "id"
	}
}

#correspondence {
	systemNodeToSystem :SystemToNode {
		#src->system
		#trg->systemNode
	}
	++ requirementToNodeSrc :RequirementToNodeSrc {
		#src->require
		#trg->connectorNode
	}
	requireBlockNodeToRequireBlock :BlockToNode {
		#src->requireBlock
		#trg->requireBlockNode
	}
	++ requirementToNodeTrg :RequirementToNodeTrg {
		#src->provide
		#trg->connectorNode
	}
	providerBlockToProviderBlockNode :BlockToNode {
		#src->providerBlock
		#trg->providerBlockNode
	}
	requireToNode :RequireToNode {
		#src->require
		#trg->requireNode
	}
	provideToProvideNode :ProvideToNode {
		#src->provide
		#trg->provideNode
	}
}

#attributeConditions {
	eq (referencedBlock.value, providerBlockIdAttr.value)
	eq (referencedPort.value, providerIdAttr.value)
}


#using BlockDiagramCodeAdapter_EdgeRules.*

#rule SystemToNodeRule #with BlockDiagramCodeAdapter_EdgeRules

#source {
	++system:BlockDiagram_EdgeRules.BlockSystem
}

#target {
	++node:MocaTree.Node {
		name := "System"
		++ - file->file
	}
	++file:MocaTree.File
}

#correspondence {
	++ systemToNode :SystemToNode {
		#src->system
		#trg->node
	}
}

#attributeConditions {
	eq (system.name, file.name)
}


#using BlockDiagramCodeAdapter_EdgeRules.*

#rule PortEdgeRule #with BlockDiagramCodeAdapter_EdgeRules

#source {
	port:BlockDiagram_EdgeRules.Port
	block:BlockDiagram_EdgeRules.Block {
		++ - ports->port
	}
}

#target {
	portNode:MocaTree.Node {
		++ - parentNode->node
	}
	node:MocaTree.Node {
		name == "Block"
	}
}

#correspondence {
	portToNode :PortToNode {
		#src->port
		#trg->portNode
	}
	blockToNode :BlockToNode {
		#src->block
		#trg->node
	}
}


