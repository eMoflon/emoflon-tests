#import "platform:/plugin/MocaTree/model/MocaTree.ecore"
#import "platform:/plugin/SokobanLanguage/model/SokobanLanguage.ecore"

#schema SokobanImportExport

#source {
	MocaTree
}

#target {
	SokobanLanguage
}

#correspondence {
	NodeToFloor {
		#src->MocaTree.Node
		#trg->SokobanLanguage.Floor
	}
	NodeToBoard {
		#src->MocaTree.Node
		#trg->SokobanLanguage.Board
	}
	AttributeToWall {
		#src->MocaTree.Attribute
		#trg->SokobanLanguage.Wall
	}
}

#attributeConditions {
	eq(1: , 0: ) {
		#sync: BF, FB, BB
		#gen: FB, BF, BB, FF
	}
	add(2:Number, 0:Number, 1:Number) {
		#sync: BBB, BBF, BFB, FBB
		#gen: FBB, BFB, BBB, BFF, FBF, FFB, BBF
	}
}


#using SokobanImportExport.*

#abstract #rule FirstRowRuleWithoutIndex #with SokobanImportExport

#source {
	otherFieldLeft:MocaTree.Node {
		name == "field"
		- parentNode->row
	}
	boardNode:MocaTree.Node {
		name == "board"
	}
	++field:MocaTree.Node {
		name := "field"
		++ - parentNode->row
	}
	row:MocaTree.Node {
		name == "row"
		- parentNode->boardNode
	}
}

#target {
	++floor:SokobanLanguage.Floor {
		++ - board->board
	}
	board:SokobanLanguage.Board
	otherFloorLeft:SokobanLanguage.Floor {
		- board->board
		++ - right->floor
	}
}

#correspondence {
	nodeToBoard :NodeToBoard {
		#src->boardNode
		#trg->board
	}
	++ fieldToFloor :NodeToFloor {
		#src->field
		#trg->floor
	}
	otherFieldLeftToOtherFloorLeft :NodeToFloor {
		#src->otherFieldLeft
		#trg->otherFloorLeft
	}
}

#attributeConditions {
	eq (row.index, floor.row)
	add (otherFieldLeft.index, 1, field.index)
	eq (field.index, floor.col)
}


#using SokobanImportExport.*

#rule TopLeftFieldRule #with SokobanImportExport

#source {
	++field:MocaTree.Node {
		index := 0
		name := "field"
		++ - parentNode->row
	}
	boardNode:MocaTree.Node {
		name == "board"
	}
	++row:MocaTree.Node {
		index := 0
		name := "row"
		++ - parentNode->boardNode
	}
}

#target {
	board:SokobanLanguage.Board
	++floor:SokobanLanguage.Floor {
		row := 0
		col := 0
		++ - board->board
	}
}

#correspondence {
	++ fieldToFloor :NodeToFloor {
		#src->field
		#trg->floor
	}
	nodeToBoard :NodeToBoard {
		#src->boardNode
		#trg->board
	}
}


#using SokobanImportExport.*

#rule FirstRowRule #extends FirstRowRuleWithoutIndex #with SokobanImportExport

#source {
	row:MocaTree.Node {
		index == 0
		name == "row"
	}
}


#using SokobanImportExport.*

#rule TopLeftContextRule #extends FirstRowRuleWithoutIndex, FirstColRuleWithoutIndex #with SokobanImportExport

#source {
	row:MocaTree.Node {
		name == "row"
	}
	otherFieldTop:MocaTree.Node {
		name == "field"
	}
}


#using SokobanImportExport.*

#abstract #rule FirstColRuleWithoutIndex #with SokobanImportExport

#source {
	++row:MocaTree.Node {
		name := "row"
		++ - parentNode->boardNode
	}
	otherFieldTop:MocaTree.Node {
		- parentNode->otherRow
	}
	++field:MocaTree.Node {
		name := "field"
		++ - parentNode->row
	}
	boardNode:MocaTree.Node {
		name == "board"
	}
	otherRow:MocaTree.Node {
		name == "row"
		- parentNode->boardNode
	}
}

#target {
	otherFloorTop:SokobanLanguage.Floor {
		- board->board
		++ - bottom->floor
	}
	++floor:SokobanLanguage.Floor {
		++ - board->board
	}
	board:SokobanLanguage.Board
}

#correspondence {
	otherFieldTopToOtherFloorTop :NodeToFloor {
		#src->otherFieldTop
		#trg->otherFloorTop
	}
	nodeToBoard :NodeToBoard {
		#src->boardNode
		#trg->board
	}
	++ fieldToFloor :NodeToFloor {
		#src->field
		#trg->floor
	}
}

#attributeConditions {
	eq (field.index, floor.col)
	eq (row.index, floor.row)
	eq (otherFieldTop.index, field.index)
	add (otherRow.index, 1, row.index)
}


#using SokobanImportExport.*

#rule FirstColRule #extends FirstColRuleWithoutIndex #with SokobanImportExport

#source {
	otherFieldTop:MocaTree.Node {
		index == 0
		name == "field"
	}
}


#using SokobanImportExport.*

#rule BoardRule #with SokobanImportExport

#source {
	++node:MocaTree.Node {
		name := "board"
	}
}

#target {
	++board:SokobanLanguage.Board
}

#correspondence {
	++ nodeToBoard :NodeToBoard {
		#src->node
		#trg->board
	}
}


#using SokobanImportExport.*

#rule FigureRule #with SokobanImportExport

#source {
	field:MocaTree.Node {
		name == "field"
		++ - attribute->figure
	}
	++figure:MocaTree.Attribute {
		name := "figure"
		value := "#"
	}
}

#target {
	floor:SokobanLanguage.Floor {
		++ - figure->sokoban
	}
	++sokoban:SokobanLanguage.Wall
}

#correspondence {
	++ figureToSokoban :AttributeToWall {
		#src->figure
		#trg->sokoban
	}
	fieldToFloor :NodeToFloor {
		#src->field
		#trg->floor
	}
}


