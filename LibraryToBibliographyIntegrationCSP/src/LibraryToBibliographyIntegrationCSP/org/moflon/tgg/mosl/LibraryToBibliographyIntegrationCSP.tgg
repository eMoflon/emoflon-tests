#import "platform:/plugin/LibraryLanguageCSP/model/LibraryLanguageCSP.ecore"
#import "platform:/plugin/BibliographyLanguageCSP/model/BibliographyLanguageCSP.ecore"

#schema LibraryToBibliographyIntegrationCSP

#source {
	LibraryLanguageCSP
}

#target {
	BibliographyLanguageCSP
}

#correspondence {
	BookToPublication {
		#src->LibraryLanguageCSP.Book
		#trg->BibliographyLanguageCSP.Publication
	}
	LibraryToBibliography {
		#src->LibraryLanguageCSP.Library
		#trg->BibliographyLanguageCSP.Bibliography
	}
	AuthorToResearcher {
		#src->LibraryLanguageCSP.Author
		#trg->BibliographyLanguageCSP.Researcher
	}
}

#attributeConditions {
	eq(1: , 0: ) {
		#sync: FB, BF, BB
		#gen: FF, BF, FB, BB
	}
	#userDefined notEq(0:one, 1:two) {
		#sync: BB
	}
	#userDefined categoryToType(1:BibliographyLanguageCSP.PaperTypes, 0:EString) {
		#sync: BB, FB, BF
		#gen: BB, FB, BF, FF
	}
	smallerOrEqual(1:Number, 0:Number) {
		#sync: BB, FB, BF
		#gen: FF, FB, BF, BB
	}
	add(0:Number, 2:Number, 1:Number) {
		#sync: BFB, FBB, BBF, BBB
		#gen: FBF, FFB, BFF, FBB, BBB, BFB, BBF
	}
	#userDefined smallerOrEqual_BBonly(0:Number, 1:Number){
		#sync: BB
		#gen: BB
	} 
}


#using LibraryToBibliographyIntegrationCSP.*

#rule RuleLibraryToBibliography #with LibraryToBibliographyIntegrationCSP

#source {
	++lib:LibraryLanguageCSP.Library {
		++ - archive->archive
	}
	++archive:LibraryLanguageCSP.Archive
}

#target {
	++biblio:BibliographyLanguageCSP.Bibliography
}

#correspondence {
	++ libraryToBibliography :LibraryToBibliography {
		#src->lib
		#trg->biblio
	}
}

#attributeConditions {
	eq (lib.location, biblio.name)
}


#using LibraryToBibliographyIntegrationCSP.*

#rule RuleConnectionBookToArchive #with LibraryToBibliographyIntegrationCSP

#source {
	lib:LibraryLanguageCSP.Library {
		- author->aut
		- archive->archive
	}
	++book:LibraryLanguageCSP.Book {
		++ - author->aut
	}
	aut:LibraryLanguageCSP.Author
	archive:LibraryLanguageCSP.Archive {
		- book->existingBook
		++ - book->book
	}
	!existingBook:LibraryLanguageCSP.Book {
		title == pub . citation
	}
}

#target {
	res:BibliographyLanguageCSP.Researcher {
		++ - publication->pub
	}
	++pub:BibliographyLanguageCSP.Publication
}

#correspondence {
	++ bookToPublication :BookToPublication {
		#src->book
		#trg->pub
	}
	authorToResearcher :AuthorToResearcher {
		#src->aut
		#trg->res
	}
}

#attributeConditions {
	eq (book.title, pub.citation)
	smallerOrEqual_BBonly (pub.year, ^yearIncremented)
	add (archive.year, -1, ^yearIncremented)
	categoryToType (book.category, pub.type)
	eq (book.year, pub.year)
}


#using LibraryToBibliographyIntegrationCSP.*

#rule RuleBookToPublication #with LibraryToBibliographyIntegrationCSP

#source {
	++book:LibraryLanguageCSP.Book {
		++ - author->aut
	}
	aut:LibraryLanguageCSP.Author
	!existingBook:LibraryLanguageCSP.Book {
		title == pub.citation
	}
	lib:LibraryLanguageCSP.Library {
		- book->existingBook
		- archive->archive
		++ - book->book
		- author->aut
	}
	archive:LibraryLanguageCSP.Archive
}

#target {
	++pub:BibliographyLanguageCSP.Publication
	res:BibliographyLanguageCSP.Researcher {
		++ - publication->pub
	}
	bibliography:BibliographyLanguageCSP.Bibliography {
		- researcher->res
	}
}

#correspondence {
	libraryToBibliography :LibraryToBibliography {
		#src->lib
		#trg->bibliography
	}
	++ bookToPublication :BookToPublication {
		#src->book
		#trg->pub
	}
	authorToResearcher :AuthorToResearcher {
		#src->aut
		#trg->res
	}
}

#attributeConditions {
	eq (book.year, pub.year)
	eq (book.title, pub.citation)
	notEq (lib.location, "Germany")
	categoryToType (book.category, pub.type)
	smallerOrEqual_BBonly (archive.year, pub.year)
}


#using LibraryToBibliographyIntegrationCSP.*

#rule RuleConnectionBookToAuthor #with LibraryToBibliographyIntegrationCSP

#source {
	aut:LibraryLanguageCSP.Author
	book:LibraryLanguageCSP.Book {
		++ - author->aut
	}
	library:LibraryLanguageCSP.Library {
		- author->aut
		- book->book
	}
}

#target {
	res:BibliographyLanguageCSP.Researcher {
		++ - publication->pub
	}
	++pub:BibliographyLanguageCSP.Publication
}

#correspondence {
	++ bookToPublication :BookToPublication {
		#src->book
		#trg->pub
	}
	authorToResearcher :AuthorToResearcher {
		#src->aut
		#trg->res
	}
}

#attributeConditions {
	eq (book.title, pub.citation)
	eq (book.year, pub.year)
}


#using LibraryToBibliographyIntegrationCSP.*

#rule RuleAuthorToResearcher #with LibraryToBibliographyIntegrationCSP

#source {
	++aut:LibraryLanguageCSP.Author
	lib:LibraryLanguageCSP.Library {
		++ - author->aut
	}
}

#target {
	++res:BibliographyLanguageCSP.Researcher
	bib:BibliographyLanguageCSP.Bibliography {
		++ - researcher->res
	}
}

#correspondence {
	++ authorToResearcher :AuthorToResearcher {
		#src->aut
		#trg->res
	}
	libraryToBibliography :LibraryToBibliography {
		#src->lib
		#trg->bib
	}
}

#attributeConditions {
	eq (aut.name, res.name)
}


