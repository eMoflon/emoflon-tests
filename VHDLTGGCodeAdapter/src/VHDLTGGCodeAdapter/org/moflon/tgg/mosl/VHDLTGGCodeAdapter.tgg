#import "platform:/plugin/MocaTree/model/MocaTree.ecore"
#import "platform:/plugin/VHDLModel/model/VHDLModel.ecore"

#schema VHDLTGGCodeAdapter

#source {
	MocaTree
}

#target {
	VHDLModel
}

#correspondence {
	NodeToInputPort {
		#src->MocaTree.Node
		#trg->VHDLModel.InputPort
	}
	NodeToBlock {
		#src->MocaTree.Node
		#trg->VHDLModel.Block
	}
	NodeToCompositeBlock {
		#src->MocaTree.Node
		#trg->VHDLModel.CompositeBlock
	}
	FileToVHDLSpecification {
		#src->MocaTree.File
		#trg->VHDLModel.VHDLSpecification
	}
	NodeToOutputPort {
		#src->MocaTree.Node
		#trg->VHDLModel.OutputPort
	}
}

#attributeConditions {
	eq(0: , 1: ) {
		#sync: BB, BF, FB
		#gen: BF, FF, BB, FB
	}
	addPrefix(1:EString, 2:EString, 0:EString) {
		#sync: BBF, BFB, FBB, BBB
		#gen: BFB, FBB, BBF, FBF, BBB, BFF
	}
	#userDefined nextIndex(0:EInt) {
		#sync: B, F
		#gen: F, B
	}
}


#using VHDLTGGCodeAdapter.*

#rule Mapping2OrGate #extends AbstractBinaryMappingRule #with VHDLTGGCodeAdapter

#source {
	++expressionNode:MocaTree.Node {
		name := "or"
	}
}

#target {
	++leftPort:VHDLModel.InputPort {
		name := "OR.in1"
		++ - block->expression
	}
	++rightPort:VHDLModel.InputPort {
		name := "OR.in2"
		++ - block->expression
	}
	++out:VHDLModel.OutputPort {
		name := "OR.out"
		++ - block->expression
	}
	++expression:VHDLModel.OrGate {
		++ - inputport1->leftPort
		++ - outputport->out
		++ - inputs->rightPort
		++ - inputport2->rightPort
		++ - inputs->leftPort
	}
}

#correspondence {
	++ orNode2Gate :NodeToBlock {
		#src->expressionNode
		#trg->expression
	}
}


#using VHDLTGGCodeAdapter.*

#rule HandleInPort #extends Handle #with VHDLTGGCodeAdapter

#source {
	++typeNode:MocaTree.Node {
		name := "in"
	}
	++portNode:MocaTree.Node {
		name := "PORT"
	}
}

#target {
	++port:VHDLModel.InputPort
	composite:VHDLModel.CompositeBlock {
		++ - ports->port
		++ - inputs->port
	}
}

#correspondence {
	++ portNodeToPort :NodeToInputPort {
		#src->portNode
		#trg->port
	}
}


#using VHDLTGGCodeAdapter.*

#abstract #rule AbstractBinaryMappingRule #extends AbstractMappingRule #with VHDLTGGCodeAdapter

#source {
	++expressionNode:MocaTree.Node
	++left:MocaTree.Node {
		index := 0
		++ - parentNode->expressionNode
	}
	++right:MocaTree.Node {
		index := 1
		++ - parentNode->expressionNode
	}
	inNode2:MocaTree.Node {
		name == "in"
		- parentNode->inputPortNode2
	}
	inputPortNode2:MocaTree.Node {
		name == "PORT"
		- parentNode->entityNode
	}
	entityNode:MocaTree.Node {
		name == "ENTITY"
	}
}

#target {
	!noInRight:VHDLModel.Port {
		- src->rightExtern
	}
	++leftPort:VHDLModel.InputPort {
		++ - src->leftExtern
	}
	compositeBlock:VHDLModel.CompositeBlock {
		- inputs->rightExtern
		- inputs->leftExtern
	}
	++rightPort:VHDLModel.InputPort {
		++ - src->rightExtern
	}
	rightExtern:VHDLModel.InputPort
	leftExtern:VHDLModel.InputPort
}

#correspondence {
	node2composite :NodeToCompositeBlock {
		#src->entityNode
		#trg->compositeBlock
	}
	node2inputPort2 :NodeToInputPort {
		#src->inputPortNode2
		#trg->rightExtern
	}
}

#attributeConditions {
	eq (leftExtern.name, left.name)
	eq (rightExtern.name, right.name)
}


#using VHDLTGGCodeAdapter.*

#rule HandleOutPort #extends Handle #with VHDLTGGCodeAdapter

#source {
	++portNode:MocaTree.Node {
		name := "PORT"
	}
	++typeNode:MocaTree.Node {
		name := "out"
	}
}

#target {
	++port:VHDLModel.OutputPort
}

#correspondence {
	++ node2outport :NodeToOutputPort {
		#src->portNode
		#trg->port
	}
}


#using VHDLTGGCodeAdapter.*

#rule Mapping2NotGate #extends AbstractMappingRule #with VHDLTGGCodeAdapter

#source {
	++expressionNode:MocaTree.Node {
		name := "not"
	}
	entityNode:MocaTree.Node {
		name == "ENTITY"
	}
	++port:MocaTree.Node {
		++ - parentNode->expressionNode
	}
}

#target {
	++expression:VHDLModel.NotGate {
		++ - inputport->in
		++ - outputport->out
		++ - inputs->in
	}
	++out:VHDLModel.OutputPort {
		name := "NOT.out"
		++ - block->expression
	}
	leftExtern:VHDLModel.InputPort
	++in:VHDLModel.InputPort {
		name := "NOT.in"
		++ - src->leftExtern
		++ - block->expression
	}
	compositeBlock:VHDLModel.CompositeBlock
}

#correspondence {
	compositeBlockToEntityNode :NodeToCompositeBlock {
		#src->entityNode
		#trg->compositeBlock
	}
	++ notNode2Gate :NodeToBlock {
		#src->expressionNode
		#trg->expression
	}
}

#attributeConditions {
	eq (leftExtern.name, port.name)
}


#using VHDLTGGCodeAdapter.*

#rule Entity2CompositeBlock #with VHDLTGGCodeAdapter

#source {
	++entity:MocaTree.Node {
		index := 1
		name := "ENTITY"
		++ - parentNode->vhdl
	}
	++gateName:MocaTree.Node {
		index := 0
		++ - parentNode->gate
	}
	++gate:MocaTree.Node {
		index := 0
		name := "GATE"
		++ - parentNode->vhdl
	}
	file:MocaTree.File
	vhdl:MocaTree.Node {
		name == "VHDL"
		- file->file
	}
	++entityName:MocaTree.Node {
		++ - parentNode->entity
	}
}

#target {
	++composite:VHDLModel.CompositeBlock
	spec:VHDLModel.VHDLSpecification {
		++ - blocks->composite
	}
}

#correspondence {
	++ gate2composite :NodeToCompositeBlock {
		#src->gate
		#trg->composite
	}
	file2spec :FileToVHDLSpecification {
		#src->file
		#trg->spec
	}
	++ entity2composite :NodeToCompositeBlock {
		#src->entity
		#trg->composite
	}
}

#attributeConditions {
	eq (gateName.name, entityName.name)
	eq (entityName.name, composite.name)
	eq (gateName.name, composite.name)
}


#using VHDLTGGCodeAdapter.*

#rule File2VHDLSpec #with VHDLTGGCodeAdapter

#source {
	++file:MocaTree.File
	++vhdl:MocaTree.Node {
		name := "VHDL"
		++ - file->file
	}
}

#target {
	++spec:VHDLModel.VHDLSpecification
}

#correspondence {
	++ file2spec :FileToVHDLSpecification {
		#src->file
		#trg->spec
	}
}

#attributeConditions {
	addPrefix (spec.name, ".vhdl", file.name)
}


#using VHDLTGGCodeAdapter.*

#abstract #rule AbstractMappingRule #with VHDLTGGCodeAdapter

#source {
	vhdlNode:MocaTree.Node {
		name == "VHDL"
	}
	outputPortNodeName:MocaTree.Node {
		- parentNode->outputPortNode
	}
	++mapping:MocaTree.Node {
		++ - parentNode->gateNode
	}
	outputPortNode:MocaTree.Node {
		name == "PORT"
		- parentNode->entityNode
	}
	outNode:MocaTree.Node {
		name == "out"
		- parentNode->outputPortNode
	}
	entityNode:MocaTree.Node {
		name == "ENTITY"
		- parentNode->vhdlNode
	}
	inputPortNode1:MocaTree.Node {
		name == "PORT"
		- parentNode->entityNode
	}
	++expressionNode:MocaTree.Node {
		++ - parentNode->mapping
	}
	gateNode:MocaTree.Node {
		name == "GATE"
		- parentNode->vhdlNode
	}
	inNode:MocaTree.Node {
		name == "in"
		- parentNode->inputPortNode1
	}
}

#target {
	!noOut:VHDLModel.Port
	++out:VHDLModel.OutputPort {
		++ - block->expression
	}
	outExternal:VHDLModel.OutputPort {
		- src->noOut
		++ - src->out
	}
	!noIn:VHDLModel.Port {
		- src->leftExtern
	}
	leftExtern:VHDLModel.InputPort
	compositeBlock:VHDLModel.CompositeBlock {
		- inputs->leftExtern
		++ - blocks->expression
		- ports->outExternal
	}
	++expression:VHDLModel.Block
}

#correspondence {
	node2OutputPort :NodeToOutputPort {
		#src->outputPortNode
		#trg->outExternal
	}
	gate2composite :NodeToCompositeBlock {
		#src->gateNode
		#trg->compositeBlock
	}
	node2InputPort1 :NodeToInputPort {
		#src->inputPortNode1
		#trg->leftExtern
	}
}

#attributeConditions {
	nextIndex (mapping.index)
	eq (outputPortNodeName.name, mapping.name)
}


#using VHDLTGGCodeAdapter.*

#abstract #rule Handle #with VHDLTGGCodeAdapter

#source {
	++typeNode:MocaTree.Node {
		++ - parentNode->portNode
	}
	entity:MocaTree.Node {
		name == "ENTITY"
	}
	++portNode:MocaTree.Node {
		name := "PORT"
		++ - parentNode->entity
	}
	++portName:MocaTree.Node {
		++ - parentNode->portNode
	}
}

#target {
	++port:VHDLModel.Port {
		++ - block->composite
	}
	composite:VHDLModel.CompositeBlock {
		++ - ports->port
	}
}

#correspondence {
	entity2composite :NodeToCompositeBlock {
		#src->entity
		#trg->composite
	}
}

#attributeConditions {
	eq (portName.name, port.name)
}


#using VHDLTGGCodeAdapter.*

#rule Mapping2AndGate #extends AbstractBinaryMappingRule #with VHDLTGGCodeAdapter

#source {
	++expressionNode:MocaTree.Node {
		name := "and"
	}
}

#target {
	++rightPort:VHDLModel.InputPort {
		name := "AND.in2"
		++ - block->expression
	}
	++leftPort:VHDLModel.InputPort {
		name := "AND.in1"
		++ - block->expression
	}
	++expression:VHDLModel.AndGate {
		++ - inputs->rightPort
		++ - inputport1->leftPort
		++ - inputport2->rightPort
		++ - inputs->leftPort
		++ - outputport->out
	}
	++out:VHDLModel.OutputPort {
		name := "AND.out"
		++ - block->expression
	}
}

#correspondence {
	++ andNode2Gate :NodeToBlock {
		#src->expressionNode
		#trg->expression
	}
}


