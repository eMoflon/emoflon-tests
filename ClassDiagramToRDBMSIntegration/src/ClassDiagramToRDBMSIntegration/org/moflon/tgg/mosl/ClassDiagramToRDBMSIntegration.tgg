#import "platform:/plugin/ClassDiagramLanguage/model/ClassDiagramLanguage.ecore"
#import "platform:/plugin/DatabaseLanguage/model/DatabaseLanguage.ecore"

#schema ClassDiagramToRDBMSIntegration

#source {
	ClassDiagramLanguage
}

#target {
	DatabaseLanguage
}

#correspondence {
	AssociationToColumn {
		#src->ClassDiagramLanguage.Association
		#trg->DatabaseLanguage.Column
	}
	ClassDiagramToSchema {
		#src->ClassDiagramLanguage.ClassDiagram
		#trg->DatabaseLanguage.Schema
	}
	ClazzToTable {
		#src->ClassDiagramLanguage.Clazz
		#trg->DatabaseLanguage.Table
	}
}

#attributeConditions {
	#userDefined concat_specific(3:EString, 0:EString, 1:EString, 2:EString) {
		#sync: BBBF, BBFB, BFBB, BBBB, BFFB
		#gen: BFBF, BBFF, BFFF
	}
	stringToInt(1:EInt, 0:EString) {
		#sync: BF, FB, BB
		#gen: FF, FB, BF, BB
	}
	eq(0: , 1: ) {
		#sync: BB, BF, FB
		#gen: BF, FB, BB, FF
	}
}


#using ClassDiagramToRDBMSIntegration.*

#rule ClassToTableRule #with ClassDiagramToRDBMSIntegration

#source {
	++clazz:ClassDiagramLanguage.Clazz
	diagram:ClassDiagramLanguage.ClassDiagram {
		++ - elements->clazz
	}
}

#target {
	++pk:DatabaseLanguage.Column {
		name := "PK"
	}
	++table:DatabaseLanguage.Table {
		++ - columns->pk
	}
	schema:DatabaseLanguage.Schema {
		++ - tables->table
	}
}

#correspondence {
	++ clazz2table :ClazzToTable {
		#src->clazz
		#trg->table
	}
	diagram2schema :ClassDiagramToSchema {
		#src->diagram
		#trg->schema
	}
}

#attributeConditions {
	concat_specific ("_", clazz.name, ^temp, table.UID)
	stringToInt (^temp, clazz.id)
}


#using ClassDiagramToRDBMSIntegration.*

#rule ClassDiagramToSchemaRule #with ClassDiagramToRDBMSIntegration

#source {
	++diagram:ClassDiagramLanguage.ClassDiagram
}

#target {
	++schema:DatabaseLanguage.Schema
}

#correspondence {
	++ diagram2schema :ClassDiagramToSchema {
		#src->diagram
		#trg->schema
	}
}

#attributeConditions {
	eq (diagram.name, schema.description)
}


#using ClassDiagramToRDBMSIntegration.*

#rule SelfAssocToColumnRule #with ClassDiagramToRDBMSIntegration

#source {
	diagram:ClassDiagramLanguage.ClassDiagram {
		- elements->clazz
		++ - elements->assoc
	}
	clazz:ClassDiagramLanguage.Clazz
	++assoc:ClassDiagramLanguage.Association {
		++ - source->clazz
		++ - target->clazz
	}
}

#target {
	++fk:DatabaseLanguage.Column {
		++ - ref->pk
	}
	table:DatabaseLanguage.Table {
		++ - columns->fk
		- columns->pk
	}
	pk:DatabaseLanguage.Column {
		name == "PK"
	}
}

#correspondence {
	++ assoc2col :AssociationToColumn {
		#src->assoc
		#trg->fk
	}
	assocSrc2table :ClazzToTable {
		#src->clazz
		#trg->table
	}
}

#attributeConditions {
	stringToInt (^temp, assoc.id)
	concat_specific ("::", assoc.name, ^temp, fk.name)
}


#using ClassDiagramToRDBMSIntegration.*

#rule AssociationToColumnRule #with ClassDiagramToRDBMSIntegration

#source {
	diagram:ClassDiagramLanguage.ClassDiagram {
		- elements->assocTrg
		- elements->assocSrc
		++ - elements->assoc
	}
	assocTrg:ClassDiagramLanguage.Clazz
	++assoc:ClassDiagramLanguage.Association {
		++ - target->assocTrg
		++ - source->assocSrc
	}
	assocSrc:ClassDiagramLanguage.Clazz
}

#target {
	pk:DatabaseLanguage.Column {
		name == "PK"
	}
	foreignTable:DatabaseLanguage.Table {
		- columns->pk
	}
	table:DatabaseLanguage.Table {
		++ - columns->fk
	}
	++fk:DatabaseLanguage.Column {
		++ - ref->pk
	}
}

#correspondence {
	assocTrg2foreignTable :ClazzToTable {
		#src->assocTrg
		#trg->foreignTable
	}
	++ assoc2col :AssociationToColumn {
		#src->assoc
		#trg->fk
	}
	assocSrc2table :ClazzToTable {
		#src->assocSrc
		#trg->table
	}
}

#attributeConditions {
	stringToInt (^temp, assoc.id)
	concat_specific ("::", assoc.name, ^temp, fk.name)
}


