#import "platform:/plugin/MocaTree/model/MocaTree.ecore"
#import "platform:/plugin/BlockLanguage/model/BlockLanguage.ecore"

#schema BlockCodeAdapter

#source {
	MocaTree
}

#target {
	BlockLanguage
}

#correspondence {
	NodeToSpecification {
		#src->MocaTree.Node
		#trg->BlockLanguage.Specification
	}
	NodeToBlock {
		#src->MocaTree.Node
		#trg->BlockLanguage.Block
	}
	NodeToWire {
		#src->MocaTree.Node
		#trg->BlockLanguage.Wire
	}
	NodeToPort {
		#src->MocaTree.Node
		#trg->BlockLanguage.Port
	}
	FileToSpecification {
		#src->MocaTree.File
		#trg->BlockLanguage.Specification
	}
}

#attributeConditions {
	stringToInt(1:EInt, 0:EString) {
		#sync: FB, BB, BF
		#gen: FB, BF, FF, BB
	}
	eq(1: , 0: ) {
		#sync: BB, BF, FB
		#gen: FF, FB, BF, BB
	}
	addPrefix(1:EString, 2:EString, 0:EString) {
		#sync: FBB, BBB, BBF, BFB
		#gen: FBB, BFF, FBF, BBB, BFB, BBF
	}
}


#using BlockCodeAdapter.*

#rule File2SpecRule #with BlockCodeAdapter

#source {
	++blocks:MocaTree.Node {
		name := "BLOCKS"
		++ - parentNode->specNode
	}
	++mappingNode:MocaTree.Node {
		name := "MAPPINGS"
		++ - parentNode->specNode
	}
	++specNode:MocaTree.Node {
		name := "SPEC"
		++ - file->file
	}
	++file:MocaTree.File
}

#target {
	++spec:BlockLanguage.Specification
}

#correspondence {
	++ n2s :NodeToSpecification {
		#src->specNode
		#trg->spec
	}
	++ f2s :FileToSpecification {
		#src->file
		#trg->spec
	}
}

#attributeConditions {
	addPrefix (spec.name, ".blocks", file.name)
}


#using BlockCodeAdapter.*

#abstract #rule BasicMapping2WireRule #with BlockCodeAdapter

#source {
	fromBlockNode:MocaTree.Node {
		- parentNode->blocks
	}
	mappingNode:MocaTree.Node {
		name == "MAPPINGS"
		- parentNode->specNode
	}
	toPortNode:MocaTree.Node
	specNode:MocaTree.Node {
		name == "SPEC"
	}
	blocks:MocaTree.Node {
		name == "BLOCKS"
		- parentNode->specNode
	}
	fromPortNode:MocaTree.Node {
		- parentNode->fromBlockNode
	}
	++to:MocaTree.Node {
		++ - parentNode->from
	}
	++from:MocaTree.Node {
		++ - parentNode->mappingNode
	}
}

#target {
	++wire:BlockLanguage.Wire {
		++ - port->toPort
	}
	toPort:BlockLanguage.Port
	fromPort:BlockLanguage.Port {
		++ - wire->wire
	}
	toBlock:BlockLanguage.Block {
		- ports->toPort
	}
	spec:BlockLanguage.Specification {
		- blocks->toBlock
	}
}

#correspondence {
	n2p2 :NodeToPort {
		#src->toPortNode
		#trg->toPort
	}
	n2s :NodeToSpecification {
		#src->specNode
		#trg->spec
	}
	++ n2w2 :NodeToWire {
		#src->to
		#trg->wire
	}
	++ n2w1 :NodeToWire {
		#src->from
		#trg->wire
	}
	n2p1 :NodeToPort {
		#src->fromPortNode
		#trg->fromPort
	}
}

#attributeConditions {
	stringToInt (to.name, toPort.id)
	eq (fromPortNode.name, from.name)
	eq (toPortNode.name, to.name)
	stringToInt (from.name, fromPort.id)
}


#using BlockCodeAdapter.*

#abstract #rule ContextMapping2WireClosedLoopRule #with BlockCodeAdapter

#source {
	toPortNode:MocaTree.Node {
		- parentNode->fromBlockNode
	}
	fromBlockNode:MocaTree.Node
}

#target {
	toBlock:BlockLanguage.Block {
		- ports->fromPort
	}
	fromPort:BlockLanguage.Port
}


#using BlockCodeAdapter.*

#rule Node2PortRule #with BlockCodeAdapter

#source {
	blocksNode:MocaTree.Node {
		name == "BLOCKS"
	}
	++portNode:MocaTree.Node {
		++ - parentNode->blockNode
	}
	blockNode:MocaTree.Node {
		- parentNode->blocksNode
	}
}

#target {
	++port:BlockLanguage.Port
	block:BlockLanguage.Block {
		++ - ports->port
	}
}

#correspondence {
	n2b :NodeToBlock {
		#src->blockNode
		#trg->block
	}
	++ n2p :NodeToPort {
		#src->portNode
		#trg->port
	}
}

#attributeConditions {
	stringToInt (portNode.name, port.id)
}


#using BlockCodeAdapter.*

#rule Mapping2WireClosedLoopRule #extends BasicMapping2WireRule, ContextMapping2WireClosedLoopRule #with BlockCodeAdapter


#using BlockCodeAdapter.*

#rule Mapping2WireRule #extends BasicMapping2WireRule, ContextMapping2WireRule_f #with BlockCodeAdapter


#using BlockCodeAdapter.*

#abstract #rule ContextMapping2WireRule_f #with BlockCodeAdapter

#source {
	toPortNode:MocaTree.Node {
		- parentNode->toBlockNode
	}
	fromBlockNode:MocaTree.Node {
		- parentNode->blocks
	}
	blocks:MocaTree.Node {
		name == "BLOCKS"
	}
	toBlockNode:MocaTree.Node {
		- parentNode->blocks
	}
}

#target {
	spec:BlockLanguage.Specification {
		- blocks->fromBlock
		- blocks->toBlock
	}
	fromPort:BlockLanguage.Port
	toBlock:BlockLanguage.Block
	fromBlock:BlockLanguage.Block {
		- ports->fromPort
	}
}


#using BlockCodeAdapter.*

#rule Node2BlockRule #with BlockCodeAdapter

#source {
	++blockNode:MocaTree.Node {
		++ - parentNode->blocks
	}
	specNode:MocaTree.Node
	blocks:MocaTree.Node {
		name == "BLOCKS"
		- parentNode->specNode
	}
}

#target {
	++block:BlockLanguage.Block
	spec:BlockLanguage.Specification {
		++ - blocks->block
	}
}

#correspondence {
	n2s :NodeToSpecification {
		#src->specNode
		#trg->spec
	}
	++ n2b :NodeToBlock {
		#src->blockNode
		#trg->block
	}
}

#attributeConditions {
	eq (block.name, blockNode.name)
}


